import numpy as np


def _sigmoid(in_data):
    return 1 / (1 + np.exp(-in_data))


# 输入层
x = np.array([0.9, 0.1, 0.8])
# 隐藏层：需要计算输入层到中间隐藏层每个节点的组合，中间隐藏层的每个节点都与输入层的每个节点
# 相连，所以w1是一个3*3的矩阵
# 因此每个节点都会得到输入信号的部分信息。
# 第一个输入节点与中间隐藏层第一个节点之间的权重为w11=0.9,输入的第二个节点与隐藏层的第一节点
# 之间的链接的权重为w21=0.3
w1 = np.array([[0.9, 0.3, 0.4],
               [0.2, 0.8, 0.2],
               [0.1, 0.5, 0.6]])
# 因为输出层包含了3个节点，所以w2也是一个3*3的矩阵
w2 = np.array([
    [0.3, 0.7, 0.5],
    [0.6, 0.5, 0.2],
    [0.8, 0.1, 0.9]
])
Xhidden = _sigmoid(w1.dot(x))
print(Xhidden)
Xoutput = w2.dot(Xhidden)
print(Xoutput)  # 最终输出的结果
